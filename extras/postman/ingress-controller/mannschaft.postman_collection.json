{
	"info": {
		"name": "mannschaft",
		"description": "REST- und GraphQL-Schnittstelle zum Microservice mannschaft",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "p",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{auth_url}}/login",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Eigene Rollen",
					"event": [
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "p",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth_url}}/rollen",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"rollen"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dev",
			"item": [
				{
					"name": "DB neu laden",
					"event": [
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "password",
									"value": "p",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "text/plain",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{mannschaften_url}}/dev/db_populate",
							"host": [
								"{{mannschaften_url}}"
							],
							"path": [
								"dev",
								"db_populate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "REST",
			"item": [
				{
					"name": "Suche mit ID",
					"item": [
						{
							"name": "Vorhandene ID 00000000-0000-0000-0000-000000000001",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID 0...01 mit If-None-Match",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									},
									{
										"key": "If-None-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID 0...01 mit falscher Versionsnummer",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									},
									{
										"key": "If-None-Match",
										"value": "0",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandene ID 99999999-9999-9999-9999-999999999999",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99999999-9999-9999-9999-999999999999",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ohne Benutzername und Passwort",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Falsches Passwort",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "FALSCHES PASSWORT",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID 0...01 als Mannschaft",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "alpha",
											"type": "string"
										},
										{
											"key": "password",
											"value": "p",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000001",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID 0...020 mit fehlenden Rechten",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "alpha",
											"type": "string"
										},
										{
											"key": "password",
											"value": "p",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000020",
											"description": "Mannschaft ID"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle nach Mannschaften anhand der ID suchen.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Suche mit Suchkriterien",
					"item": [
						{
							"name": "Alle",
							"event": [
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Alle mit falschem Passwort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(401);\r",
											"    pm.expect(error).to.be.equal('Unauthorized');\r",
											"    pm.expect(path).to.be.equal('/rest');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "FALSCH",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Alle mit fehlenden Rechten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(403);\r",
											"    pm.expect(error).to.be.equal('Forbidden');\r",
											"    pm.expect(path).to.be.equal('/rest');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p",
											"type": "string"
										},
										{
											"key": "username",
											"value": "alpha",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"i\" des Nachnamens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"i\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('i');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=i",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "i"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandener Nachname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname \"Alpha\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.equal('Alpha');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=Alpha",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "Alpha"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandener Teilstring des Nachnamens",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=Zeta",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "Zeta"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene Emailadresse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Email und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.has.a.lengthOf(1);\r",
											"    const { email, _links } = mannschaften[0];\r",
											"    pm.expect(email).to.be.equal('admin@acme.com');\r",
											"    pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?email=admin%40acme.com",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "email",
											"value": "admin%40acme.com"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandene Emailadresse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?email=Nicht%40Vorhanden",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "email",
											"value": "Nicht%40Vorhanden"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"a\" des Nachnamens und PLZ \"1\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\", PLZ beginnt mit \"1\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, adresse, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"        pm.expect(adresse).to.be.an('object').that.hasOwnProperty('plz');\r",
											"        pm.expect(adresse.plz).to.match(/^1/u);\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=a&plz=1",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "a"
										},
										{
											"key": "plz",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"a\" des Nachnamens und Ort \"aa\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\", Ort enthaelt \"aa\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, adresse, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"        pm.expect(adresse).to.be.an('object').that.hasOwnProperty('ort');\r",
											"        pm.expect(adresse.ort.toLowerCase()).to.contain('aa');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=a&ort=aa",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "a"
										},
										{
											"key": "ort",
											"value": "aa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"a\" des Nachnamens, PLZ, Ort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\", PLZ beginnt mit \"1\", Ort enthaelt \"a\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, adresse, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"        pm.expect(adresse).to.be.an('object').that.hasOwnProperty('plz');\r",
											"        pm.expect(adresse.plz).to.match(/^1/u);\r",
											"        pm.expect(adresse).to.be.an('object').that.hasOwnProperty('ort');\r",
											"        pm.expect(adresse.ort.toLowerCase()).to.contain('a');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=a&plz=1&ort=a",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "a"
										},
										{
											"key": "plz",
											"value": "1"
										},
										{
											"key": "ort",
											"value": "a"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"a\" des Nachnamens und Geschlecht \"W\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\", Geschlecht \"W\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, geschlecht, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"        pm.expect(geschlecht).to.be.a('string').that.equals('W');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=a&geschlecht=W",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "a"
										},
										{
											"key": "geschlecht",
											"value": "W"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Teilstring \"a\" des Nachnamens und Familienstand \"VH\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\", Familienstand \"VH\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { nachname, familienstand, _links } = mannschaft;\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"        pm.expect(familienstand).to.be.a('string').that.equals('VH');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?nachname=a&familienstand=VH",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "nachname",
											"value": "a"
										},
										{
											"key": "familienstand",
											"value": "VH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Suche mit einem Interesse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"i\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { interessen, _links } = mannschaft;\r",
											"        pm.expect(interessen).to.be.an('array').that.includes('L');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?interesse=L",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "interesse",
											"value": "L"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Suche mit mehreren Interessen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/hal+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/hal+json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"i\" und Self-Link vorhanden', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body._embedded;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { interessen, _links } = mannschaft;\r",
											"        pm.expect(interessen).to.be.an('array').that.includes('L');\r",
											"        pm.expect(interessen).to.be.an('array').that.includes('S');\r",
											"        pm.expect(_links.self.href).to.be.a('string').that.matches(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/hal+json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}?interesse=L&interesse=S",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "interesse",
											"value": "L"
										},
										{
											"key": "interesse",
											"value": "S"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nachnamen mit PrÃ¤fix",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body: Nachname enthaelt \"a\"', () => {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.be.an('array').that.is.not.empty;\r",
											"    body.forEach(nachname => {\r",
											"        pm.expect(nachname).to.be.a('string');\r",
											"        pm.expect(nachname.toLowerCase()).to.include('a');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{rest_url}}/nachname/:praefix",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										"nachname",
										":praefix"
									],
									"variable": [
										{
											"key": "praefix",
											"value": "a"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandene Property",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{rest_url}}?php=true",
									"host": [
										"{{rest_url}}"
									],
									"query": [
										{
											"key": "php",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle nach Mannschaften mit Suchkriterien suchen.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Neuanlegen",
					"item": [
						{
							"name": "Neuer Mannschaft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 201', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test('Location', () => {\r",
											"    const { response } = pm;\r",
											"    const location = response.headers.get('Location');\r",
											"    pm.expect(location).to.match(/\\/rest\\/[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"});\r",
											"pm.test('Leerer Body', () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a('string').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mannschaft\": {\r\n    \"nachname\": \"Testpost\",\r\n    \"email\": \"Testpost@test.de\",\r\n    \"kategorie\": 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"adresse\": {\r\n      \"plz\": \"12345\",\r\n      \"ort\": \"Testortpost\"\r\n    },\r\n    \"umsaetze\": [{\r\n      \"betrag\": 1,\r\n      \"waehrung\": \"EUR\"\r\n    }],\r\n    \"interessen\": [\r\n      \"R\",\r\n      \"L\"\r\n    ]\r\n  },\r\n  \"user\": {\r\n    \"username\": \"testpost\",\r\n    \"password\": \"Pass123.\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Neuer Mannschaft mit bereits existierender Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Response Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, detail } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Emailadresse');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mannschaft\": {\r\n    \"nachname\": \"Test\",\r\n    \"email\": \"admin@acme.com\",\r\n    \"kategorie\": 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"adresse\": {\r\n      \"plz\": \"12345\",\r\n      \"ort\": \"Testort\"\r\n    },\r\n    \"umsaetze\": [{\r\n      \"betrag\": 0,\r\n      \"waehrung\": \"EUR\"\r\n    }],\r\n    \"interessen\": [\r\n      \"R\",\r\n      \"L\"\r\n    ]\r\n  },\r\n  \"user\": {\r\n    \"username\": \"test\",\r\n    \"password\": \"Pass123.\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Neuer Mannschaft mit ungÃ¼ltigen Daten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Fehlermeldungen im Response Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, detail } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    const props = ['nachname', 'email', 'kategorie', 'geburtsdatum', 'interessen', 'adresse.plz'];\r",
											"    pm.expect(detail).to.be.a('string');\r",
											"    props.forEach(prop => pm.expect(detail).to.include(prop));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mannschaft\": {\r\n    \"nachname\": \"?!$\",\r\n    \"email\": \"email\",\r\n    \"kategorie\": 11,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"3000-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"adresse\": {\r\n      \"plz\": \"1234\",\r\n      \"ort\": \"Testort\"\r\n    },\r\n    \"umsaetze\": [{\r\n      \"betrag\": 0,\r\n      \"waehrung\": \"EUR\"\r\n    }],\r\n    \"interessen\": [\r\n      \"R\",\r\n      \"L\",\r\n      \"L\"\r\n    ]\r\n  },\r\n  \"user\": {\r\n    \"username\": \"test\",\r\n    \"password\": \"Pass1234\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Neuer Mannschaft mit ungÃ¼ltigem Passwort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Response Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, detail } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Passwort');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"mannschaft\" : {\r\n    \"nachname\": \"Test\",\r\n    \"email\": \"Theo@password.de\",\r\n    \"kategorie\": 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"adresse\": {\r\n      \"plz\": \"12345\",\r\n      \"ort\": \"Testort\"\r\n    },\r\n    \"umsaetze\": [{\r\n      \"betrag\": 0,\r\n      \"waehrung\": \"EUR\"\r\n    }],\r\n    \"interessen\": [\r\n      \"R\",\r\n      \"L\"\r\n    ]\r\n  },\r\n  \"user\": {\r\n    \"username\": \"test\",\r\n    \"password\": \"p\"\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Neuer Mannschaft mit fehlerhaften Datentypen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 400', () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Test\",\r\n    \"email\": \"Theo@Test.de\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"123\",\r\n    \"homepage\": \"123!\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"adresse\": {\r\n        \"plz\": 12345,\r\n        \"ort\": \"Testort\"\r\n    },\r\n    \"umsaetze\": [{\r\n        \"betrag\": 0,\r\n        \"waehrung\": \"Xy\"\r\n    }],\r\n    \"interessen\": [\r\n        \"R\",\r\n        \"L\"\r\n    ],\r\n   \"user\": {\r\n        \"username\": \"test\",\r\n        \"password\": \"Pass123.\"\r\n   }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}",
									"host": [
										"{{rest_url}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle neue Mannschaften anlegen",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{TOKEN}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Ã„ndern durch PUT",
					"item": [
						{
							"name": "Mannschaft 30 Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 204', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.test('ETag', () => {\r",
											"    const etag = pm.response.headers.get('ETag');\r",
											"    pm.expect(etag).to.match(/^\"\\d+\"$/u);\r",
											"});\r",
											"pm.test('Leerer Body', () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a('string').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Testput\",\r\n    \"email\": \"Theo@Test.de.put\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 ohne Versionsnummer Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 428', () => {\r",
											"    pm.response.to.have.status(428);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, title, detail, instance } = body;\r",
											"    pm.expect(status).to.be.equal(428);\r",
											"    pm.expect(title).to.be.equal('Precondition Required');\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Versionsnummer');\r",
											"    pm.expect(instance).to.match(/rest\\/00000000-0000-0000-0000-000000000030$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Testput\",\r\n    \"email\": \"Theo@Test.de.put\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 mit falscher Versionsnummer Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 412', () => {\r",
											"    pm.response.to.have.status(412);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, title, detail, instance } = body;\r",
											"    pm.expect(status).to.be.equal(412);\r",
											"    pm.expect(title).to.be.equal('Precondition Failed');\r",
											"    pm.expect(detail).to.be.a('string').that.includes('ETag');\r",
											"    pm.expect(instance).to.match(/rest\\/00000000-0000-0000-0000-000000000030$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Testput\",\r\n    \"email\": \"Theo@Test.de.put\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 mit alter Versionsnummer Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 412', () => {\r",
											"    pm.response.to.have.status(412);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');;\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, title, detail, instance } = body;\r",
											"    pm.expect(status).to.be.equal(412);\r",
											"    pm.expect(title).to.be.equal('Precondition Failed');\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Versionsnummer');\r",
											"    pm.expect(instance).to.match(/rest\\/00000000-0000-0000-0000-000000000030$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"-1\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Testput\",\r\n    \"email\": \"Theo@Test.de.put\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandener Mannschaft Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 404', () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test('Leerer Body', () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a('string').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"Testput\",\r\n    \"email\": \"Theo@Test.de.put\",\r\n    \"kategorie\" : 1,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"2022-01-31\",\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 mit ungÃ¼ltigen Daten Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, title, status, detail, instance } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    pm.expect(title).to.be.equal('Unprocessable Entity');\r",
											"    pm.expect(status).to.be.equal(422);\r",
											"    const props = ['nachname', 'email', 'kategorie', 'geburtsdatum'];\r",
											"    pm.expect(detail).to.be.a('string');\r",
											"    props.forEach(prop => pm.expect(detail).to.include(prop));\r",
											"    pm.expect(instance).to.match(/rest\\/00000000-0000-0000-0000-000000000030$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nachname\": \"?!%\",\r\n    \"email\": \"email\",\r\n    \"kategorie\" : 11,\r\n    \"hasNewsletter\": true,\r\n    \"geburtsdatum\": \"3000-01-31\",\r\n    \"umsatz\": {\r\n        \"betrag\": 0,\r\n        \"waehrung\": \"EUR\"\r\n    },\r\n    \"homepage\": \"https://www.test.de\",\r\n    \"geschlecht\": \"W\",\r\n    \"familienstand\": \"L\",\r\n    \"username\": \"invalid\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 Ã¤ndern und Email existiert",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, title, status, detail, instance } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    pm.expect(title).to.be.equal('Unprocessable Entity');\r",
											"    pm.expect(status).to.be.equal(422);\r",
											"    const props = ['nachname', 'email', 'kategorie', 'geburtsdatum'];\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Emailadresse');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"1\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nachname\": \"Testput\",\r\n  \"email\": \"admin@acme.com\",\r\n  \"kategorie\" : 1,\r\n  \"hasNewsletter\": true,\r\n  \"geburtsdatum\": \"2022-01-31\",\r\n  \"homepage\": \"https://www.test.de\",\r\n  \"geschlecht\": \"W\",\r\n  \"familienstand\": \"L\",\r\n  \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 30 mit falschem Passwort Ã¤ndern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(401);\r",
											"    pm.expect(error).to.be.equal('Unauthorized');\r",
											"    pm.expect(path).to.be.equal('/rest/00000000-0000-0000-0000-000000000030');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "FALSCH",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "If-Match",
										"value": "\"1\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nachname\": \"Testput\",\r\n  \"email\": \"admin@acme.com\",\r\n  \"kategorie\" : 1,\r\n  \"hasNewsletter\": true,\r\n  \"geburtsdatum\": \"2022-01-31\",\r\n  \"homepage\": \"https://www.test.de\",\r\n  \"geschlecht\": \"W\",\r\n  \"familienstand\": \"L\",\r\n  \"username\": \"alpha3\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000030"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle vorhandene Mannschaften Ã¤ndern",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Ã„ndern durch PATCH",
					"item": [
						{
							"name": "PATCH fÃ¼r Mannschaft 40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 204', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.test('ETag', () => {\r",
											"    const etag = pm.response.headers.get('ETag');\r",
											"    pm.expect(etag).to.match(/^\"\\d+\"$/u);\r",
											"});\r",
											"pm.test('Leerer Body', () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a('string').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    { \"op\": \"replace\", \"path\": \"/nachname\", \"value\": \"Neuernamepatch\" },\r\n    { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"new.email@test.depatch\" },\r\n    { \"op\": \"add\", \"path\": \"/interessen\", \"value\": \"S\" },\r\n    { \"op\": \"remove\", \"path\": \"/interessen\", \"value\": \"L\" }\r\n]"
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000040"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH fÃ¼r Mannschaft 40 mit ungÃ¼ltigen Daten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');;\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, title, status, detail, instance } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/constraints');\r",
											"    pm.expect(title).to.be.equal('Unprocessable Entity');\r",
											"    pm.expect(status).to.be.equal(422);\r",
											"    pm.expect(detail).to.be.a('string');\r",
											"    pm.expect(detail).to.include('email:');\r",
											"    pm.expect(detail).to.include('nachname:');\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    { \"op\": \"replace\", \"path\": \"/nachname\", \"value\": \"?!\" },\r\n    { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"emailungueltig@\" }\r\n]"
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000040"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH fÃ¼r Mannschaft 40 mit ungÃ¼ltigen Interessen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 422', () => {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test('Content-Type application/problem+json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/problem+json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { type, title, status, detail, instance } = body;\r",
											"    pm.expect(type).to.be.equal('/problem/unprocessable');\r",
											"    pm.expect(title).to.be.equal('Unprocessable Entity');\r",
											"    pm.expect(status).to.be.equal(422);\r",
											"    pm.expect(detail).to.be.a('string').that.includes('Patch-Operation');\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    { \"op\": \"replace\", \"path\": \"/nachname\", \"value\": \"Neuername\" },\r\n    { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"new.email@test.de\" },\r\n    { \"op\": \"add\", \"path\": \"/interessen\", \"value\": \"X\" },\r\n    { \"op\": \"remove\", \"path\": \"/interessen\", \"value\": \"Y\" }\r\n]"
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000040"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH fÃ¼r Mannschaft 40 mit falschem Passwort",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(401);\r",
											"    pm.expect(error).to.be.equal('Unauthorized');\r",
											"    pm.expect(path).to.be.equal('/rest/00000000-0000-0000-0000-000000000040');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "password",
											"value": "FALSCH",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    { \"op\": \"replace\", \"path\": \"/nachname\", \"value\": \"Neuernamepatch\" },\r\n    { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"new.email@test.depatch\" },\r\n    { \"op\": \"add\", \"path\": \"/interessen\", \"value\": \"S\" },\r\n    { \"op\": \"remove\", \"path\": \"/interessen\", \"value\": \"L\" }\r\n]"
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000040"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH fÃ¼r Mannschaft 40 mit fehlenden Rechten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(403);\r",
											"    pm.expect(error).to.be.equal('Forbidden');\r",
											"    pm.expect(path).to.be.equal('/rest/00000000-0000-0000-0000-000000000040');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p",
											"type": "string"
										},
										{
											"key": "username",
											"value": "alpha",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    { \"op\": \"replace\", \"path\": \"/nachname\", \"value\": \"Neuernamepatch\" },\r\n    { \"op\": \"replace\", \"path\": \"/email\", \"value\": \"new.email@test.depatch\" },\r\n    { \"op\": \"add\", \"path\": \"/interessen\", \"value\": \"S\" },\r\n    { \"op\": \"remove\", \"path\": \"/interessen\", \"value\": \"L\" }\r\n]"
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000040"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle vorhandene Mannschaften Ã¤ndern",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "LÃ¶schen",
					"item": [
						{
							"name": "Mannschaft 50 lÃ¶schen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 204', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"pm.test('Leerer Body', () => {\r",
											"    const body = pm.response.text();\r",
											"    pm.expect(body).to.be.a('string').that.is.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000050"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandener Mannschaft lÃ¶schen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 204', () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "99999999-9999-9999-9999-999999999999"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 50 mit falschem Passwort lÃ¶schen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 401', () => {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(401);\r",
											"    pm.expect(error).to.be.equal('Unauthorized');\r",
											"    pm.expect(path).to.be.equal('/rest/00000000-0000-0000-0000-000000000050');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "FALSCH",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000050"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mannschaft 50 mit fehlenden Rechten lÃ¶schen",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 403', () => {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.equal('application/json');\r",
											"});\r",
											"pm.test('Problem Details', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { status, error, path } = body;\r",
											"    pm.expect(status).to.be.equal(403);\r",
											"    pm.expect(error).to.be.equal('Forbidden');\r",
											"    pm.expect(path).to.be.equal('/rest/00000000-0000-0000-0000-000000000050');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "p",
											"type": "string"
										},
										{
											"key": "username",
											"value": "alpha",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "If-Match",
										"value": "\"0\"",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{rest_url}}/:id",
									"host": [
										"{{rest_url}}"
									],
									"path": [
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "00000000-0000-0000-0000-000000000050"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Ãœber die REST-Schnittstelle vorhandene Mannschaften lÃ¶schen",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "REST-Schnittstelle"
		},
		{
			"name": "GraphQL",
			"item": [
				{
					"name": "Query",
					"item": [
						{
							"name": "Vorhandene ID 00000000-0000-0000-0000-000000000001",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit den Properties', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaft } = body.data;\r",
											"    const { version, nachname, email, kategorie, hasNewsletter, geburtsdatum, homepage, geschlecht, familienstand, interessen, adresse } = mannschaft;\r",
											"    pm.expect(version).to.be.a('number').that.is.gte(0);\r",
											"    pm.expect(nachname).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(email).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(kategorie).to.be.a('number');\r",
											"    pm.expect(hasNewsletter).to.be.a('boolean');\r",
											"    pm.expect(geburtsdatum).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(homepage).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(geschlecht).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(familienstand).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(interessen).to.be.an('array').that.is.not.empty;\r",
											"    interessen.forEach(interesse => pm.expect(interesse).to.be.a('string'));\r",
											"    pm.expect(adresse).to.be.an('object');\r",
											"    const { plz, ort } = adresse;\r",
											"    pm.expect(plz).to.be.a('string').that.matches(/^\\d{5}/u);\r",
											"    pm.expect(ort).to.be.a('string').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id: ID! = \"00000000-0000-0000-0000-000000000001\", $first: Int! = 2) {\r\n  mannschaft(id: $id) {\r\n    version\r\n    nachname\r\n    email\r\n    kategorie\r\n    hasNewsletter\r\n    geburtsdatum\r\n    homepage\r\n    geschlecht\r\n    familienstand\r\n    interessen\r\n    adresse {\r\n      plz\r\n      ort\r\n    }\r\n    umsaetze(first: $first) {\r\n        betrag\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"id\": \"00000000-0000-0000-0000-000000000001\",\r\n  \"first\": 2\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID ohne Authentifizierung",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { data, errors } = body;\r",
											"    pm.expect(data).to.be.an('object').that.is.empty;\r",
											"    pm.expect(errors).to.be.an('array').that.has.length(1);\r",
											"    const { message, extensions } = errors[0];\r",
											"    pm.expect(message).to.be.equal('Unauthorized');\r",
											"    pm.expect(extensions.classification).to.be.equal('UNAUTHORIZED');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id: ID! = \"00000000-0000-0000-0000-000000000001\") {\r\n  mannschaft(id: $id) {\r\n    nachname\r\n  }\r\n}",
										"variables": "{\r\n  \"id\": \"00000000-0000-0000-0000-000000000001\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene ID 00000000-0000-0000-0000-000000000001 alle UmsÃ¤tze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit den Properties', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaft } = body.data;\r",
											"    const { version, nachname, email, kategorie, hasNewsletter, geburtsdatum, homepage, geschlecht, familienstand, interessen, adresse } = mannschaft;\r",
											"    pm.expect(version).to.be.a('number').that.is.gte(0);\r",
											"    pm.expect(nachname).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(email).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(kategorie).to.be.a('number');\r",
											"    pm.expect(hasNewsletter).to.be.a('boolean');\r",
											"    pm.expect(geburtsdatum).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(homepage).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(geschlecht).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(familienstand).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(interessen).to.be.an('array').that.is.not.empty;\r",
											"    interessen.forEach(interesse => pm.expect(interesse).to.be.a('string'));\r",
											"    pm.expect(adresse).to.be.an('object');\r",
											"    const { plz, ort } = adresse;\r",
											"    pm.expect(plz).to.be.a('string').that.matches(/^\\d{5}/u);\r",
											"    pm.expect(ort).to.be.a('string').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id: ID! = \"00000000-0000-0000-0000-000000000001\") {\r\n  mannschaft(id: $id) {\r\n    version\r\n    nachname\r\n    email\r\n    kategorie\r\n    hasNewsletter\r\n    geburtsdatum\r\n    homepage\r\n    geschlecht\r\n    familienstand\r\n    interessen\r\n    adresse {\r\n      plz\r\n      ort\r\n    }\r\n    umsaetze {\r\n        betrag\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"id\": \"00000000-0000-0000-0000-000000000001\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandene ID ffffffff-ffff-ffff-ffff-ffffffffffff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { data, errors } = body;\r",
											"    pm.expect(data).to.be.an('object').that.is.empty;\r",
											"    pm.expect(errors).to.be.an('array').that.has.length(1);\r",
											"    const { message, extensions } = errors[0];\r",
											"    pm.expect(message).to.be.a('string').that.includes('ffffffff-ffff-ffff-ffff-ffffffffffff');\r",
											"    pm.expect(extensions.classification).to.be.equal('NOT_FOUND');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($id: ID! = \"ffffffff-ffff-ffff-ffff-ffffffffffff\") {\r\n  mannschaft(id: $id) {\r\n    nachname\r\n  }\r\n}",
										"variables": "{\r\n  \"id\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Alle Mannschaften",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit den Properties', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body.data;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { id, nachname, kategorie, hasNewsletter, geburtsdatum, homepage, geschlecht, familienstand, adresse } = mannschaft;\r",
											"        pm.expect(id).to.be.a('string').that.matches(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"        pm.expect(nachname).to.be.a('string').that.is.not.empty;\r",
											"        pm.expect(kategorie).to.be.a('number').that.is.gte(0);\r",
											"        pm.expect(hasNewsletter).to.be.a('boolean');\r",
											"        pm.expect(geburtsdatum).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(homepage).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(geschlecht).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(familienstand).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(adresse).to.be.an('object');\r",
											"        const { plz, ort } = adresse;\r",
											"        pm.expect(plz).to.be.a('string').that.matches(/^\\d{5}/u);\r",
											"        pm.expect(ort).to.be.a('string').that.is.not.empty;;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\r\n  mannschaften {\r\n    id\r\n    nachname\r\n    kategorie\r\n    hasNewsletter\r\n    geburtsdatum\r\n    homepage\r\n    geschlecht\r\n    familienstand\r\n    interessen\r\n    adresse {\r\n      plz\r\n      ort\r\n    }\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandene Emailadresse admin@acm.com",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit den Properties', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body.data;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.has.length(1);\r",
											"    const mannschaft = mannschaften[0];\r",
											"    const { id, nachname, kategorie, hasNewsletter, geburtsdatum, homepage, geschlecht, familienstand, adresse } = mannschaft;\r",
											"    pm.expect(id).to.be.a('string').that.matches(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"    pm.expect(nachname).to.be.a('string').that.is.not.empty;\r",
											"    pm.expect(kategorie).to.be.a('number').that.is.gte(0);\r",
											"    pm.expect(hasNewsletter).to.be.a('boolean');\r",
											"    pm.expect(geburtsdatum).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(homepage).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(geschlecht).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(familienstand).to.be.a('string').that.is.not.empty;;\r",
											"    pm.expect(adresse).to.be.an('object');\r",
											"    const { plz, ort } = adresse;\r",
											"    pm.expect(plz).to.be.a('string').that.matches(/^\\d{5}/u);\r",
											"    pm.expect(ort).to.be.a('string').that.is.not.empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($email: String! = \"admin@acme.com\") {\r\n  mannschaften(input: {email: $email})  {\r\n    id\r\n    nachname\r\n    kategorie\r\n    hasNewsletter\r\n    geburtsdatum\r\n    homepage\r\n    geschlecht\r\n    familienstand\r\n    interessen\r\n    adresse {\r\n      plz\r\n      ort\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"email\": \"admin@acme.com\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandene Emailadresse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { data, errors } = body;\r",
											"    pm.expect(data).to.be.an('object').that.is.empty;\r",
											"    pm.expect(errors).to.be.an('array').that.has.length(1);\r",
											"    const { message, extensions } = errors[0];\r",
											"    pm.expect(message).to.be.a('string').that.includes('email');\r",
											"    pm.expect(extensions.classification).to.be.equal('NOT_FOUND');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($email: String! = \"Nicht.Vorhanden@acme.com\") {\r\n  mannschaften(input: {email: $email})  {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"email\": \"Nicht.Vorhanden@acme.com\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Vorhandener Nachname mit Teilstring",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit den Properties', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { mannschaften } = body.data;\r",
											"    pm.expect(mannschaften).to.be.an('array').that.is.not.empty;\r",
											"    mannschaften.forEach(mannschaft => {\r",
											"        const { id, version, nachname, email, kategorie, hasNewsletter, geburtsdatum, homepage, geschlecht, familienstand, adresse } = mannschaft;\r",
											"        pm.expect(id).to.be.a('string').that.matches(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"        pm.expect(version).to.be.a('number').that.is.gte(0);\r",
											"        pm.expect(nachname).to.be.a('string').that.is.not.empty;\r",
											"        pm.expect(email).to.be.a('string').that.is.not.empty;\r",
											"        pm.expect(kategorie).to.be.a('number').that.is.gte(0);\r",
											"        pm.expect(hasNewsletter).to.be.a('boolean');\r",
											"        pm.expect(geburtsdatum).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(homepage).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(geschlecht).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(familienstand).to.be.a('string').that.is.not.empty;;\r",
											"        pm.expect(adresse).to.be.an('object');\r",
											"        const { plz, ort } = adresse;\r",
											"        pm.expect(plz).to.be.a('string').that.matches(/^\\d{5}/u);\r",
											"        pm.expect(ort).to.be.a('string').that.is.not.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($nachname: String! = \"a\") {\r\n  mannschaften(input: {nachname: $nachname})  {\r\n    id\r\n    version\r\n    nachname\r\n    email\r\n    kategorie\r\n    hasNewsletter\r\n    geburtsdatum\r\n    homepage\r\n    geschlecht\r\n    familienstand\r\n    interessen\r\n    adresse {\r\n      plz\r\n      ort\r\n    }\r\n  }\r\n}",
										"variables": "{\r\n  \"nachname \": \"a\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Nicht-vorhandener Nachname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Fehlermeldung im Body', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { data, errors } = body;\r",
											"    pm.expect(data).to.be.an('object').that.is.empty;\r",
											"    pm.expect(errors).to.be.an('array').that.has.length(1);\r",
											"    const { message, extensions } = errors[0];\r",
											"    pm.expect(message).to.be.a('string').that.includes('nachname');\r",
											"    pm.expect(extensions.classification).to.be.equal('NOT_FOUND');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query ($nachname: String! = \"Nichtvorhanden\") {\r\n  mannschaften(input: {nachname: $nachname})  {\r\n    id\r\n  }\r\n}",
										"variables": "{\r\n  \"nachname\": \"Nichtvorhanden\"\r\n}"
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "p",
								"type": "string"
							},
							{
								"key": "username",
								"value": "admin",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Mutation",
					"item": [
						{
							"name": "Neuer Mannschaft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit der id', () => {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body.data.create.id).to.match(/^[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}$/u);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\r\n  create(\r\n    input: {\r\n      nachname: \"Neuernachname-Graphql\"\r\n      email: \"neue.email.graphql@test.de\"\r\n      kategorie: 1\r\n      hasNewsletter: true\r\n      geburtsdatum: \"2022-01-31\"\r\n      homepage: \"https://test.de\"\r\n      geschlecht: WEIBLICH\r\n      familienstand: LEDIG\r\n      adresse: {\r\n        plz: \"11111\"\r\n        ort: \"Testort\"\r\n      }\r\n      umsaetze: [{\r\n        betrag: \"1\"\r\n        waehrung: \"EUR\"\r\n      }]\r\n      interessen: [SPORT, REISEN]\r\n      username: \"neugraphql\"\r\n      password: \"Pass123.\"\r\n    }\r\n  ) {\r\n    id\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Neuer Mannschaft mit ungÃ¼ltigen Daten",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Statuscode 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test('Content-Type application/json', () => {\r",
											"    const { response } = pm;\r",
											"    const contentType = response.headers.get('Content-Type');\r",
											"    pm.expect(contentType).to.be.equal('application/json');\r",
											"});\r",
											"pm.test('Body mit der id', () => {\r",
											"    const body = pm.response.json();\r",
											"    const { data, errors } = body;\r",
											"    pm.expect(data).to.be.an('object').that.is.empty;\r",
											"    pm.expect(errors).to.be.an('array').that.has.length(4);\r",
											"    errors.forEach(error => {\r",
											"        const { path, extensions } = error;\r",
											"        pm.expect(path).to.be.an('array').that.is.not.empty;\r",
											"        pm.expect(path[0]).to.be.equal('input');\r",
											"        pm.expect(extensions.classification).to.be.equal('BAD_REQUEST');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\r\n  create(\r\n    input: {\r\n      nachname: \"?!:\"\r\n      email: \"email\"\r\n      kategorie: 11\r\n      hasNewsletter: true\r\n      geburtsdatum: \"2022-01-31\"\r\n      homepage: \"https://acme.com\"\r\n      geschlecht: WEIBLICH\r\n      familienstand: LEDIG\r\n      adresse: {\r\n        plz: \"1\"\r\n        ort: \"Testort\"\r\n      }\r\n      umsaetze: [{\r\n        betrag: \"1\"\r\n        waehrung: \"EUR\"\r\n      }]\r\n      interessen: [SPORT, REISEN]\r\n      username: \"test\"\r\n      password: \"Pass123.\"\r\n    }\r\n  ) {\r\n    id\r\n  }\r\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{graphql_url}}",
									"host": [
										"{{graphql_url}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "GraphQL-Schnittstelle"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mannschaften_url",
			"value": "{{base_url}}/mannschaften",
			"type": "string"
		},
		{
			"key": "rest_url",
			"value": "{{mannschaften_url}}/rest",
			"type": "string"
		},
		{
			"key": "auth_url",
			"value": "{{mannschaften_url}}/auth",
			"type": "string"
		},
		{
			"key": "graphql_url",
			"value": "{{mannschaften_url}}/graphql",
			"type": "string"
		}
	]
}
